#!/bin/sh

##
# Functions for bash kit.
#
# This file contains various functions for making life on the command line a
# little bit easier.

##
# Change directory using the name of a directory known to Drupal.
#
# This function utilizes drush's drupal-directory command to change directory
# to the returned path. It used pushd instead of cd to collect a history of
# visited directories.
#
# Usage:
#   cdd <name>
#
# Examples:
#   cdd devel           # Change to the devel module directory.
#   cdd modules/custom  # Change to custom modules directory (e.g.,
#                         sites/all/modules/custom).
#   cdd                 # Change to the Drupal root directory.
#
function cdd() {
  pushd `drush dd $@` > /dev/null
}

##
# Silently keeps a history of all visited directories.
#
# This function remaps cd to instead use pushd to collect a history of visited
# directories.
#
function cd () {
  pushd "$@" > /dev/null
}

##
# Step back through the visited directories history.
#
# Thus function provides a quick and easy way to retrace your steps back
# through recently visited directories.
#
function pd () {
  popd "$@" > /dev/null
}

##
# Clone a project from git.drupal.org.
#
function dclone () {
  git clone "git://git.drupal.org/project/$1.git"
}

##
# Create a new development site.
#
# Assumes a Drupal Developer profile skeleton makefile named dd.make in the
# current directory.
#
function dd () {
  MAKEFILE="${DRUSH_MAKEFILES}dd.make"
  dmake $MAKEFILE $1
  sql create drupal_$1
}

##
# Run a makefile for a given target. Should be used internally.
#
function dmake() {
  $drush make $1 $2
}

##
# Open given module in the default editor.
#
function e () {
  $EDITOR `drush dd $@`
}

##
# Add aliases that persist beyond the current session.
#
# By appending aliases to the file specified by the BASH_KIT_ALIASES
# environment variable, new aliases can persist beyond the current session.
# This is helpful because usually aliases defined using the alias command are
# disgarded at the end of the session and in some cases this is not what is
# desired.
#
# Usage:
#   aa <name> <command>
#
# Example:
#   aa test date  # Maps the date command to be callable using test.
#
function aa () {
  if [ ! -f $BASH_KIT_ALIASES ]; then
    touch $BASH_KIT_ALIASES
  fi
  if [ $# -lt 2 ]; then
    echo "usage: add <alias> <command>"
    return
  fi
  local command=$1
  shift 1
  alias="alias $command='$@'"
  read -p "Add alias: $alias?"
  printf "$alias\n" >> $BASH_KIT_ALIASES
  if [[ $# ]]; then
    echo "Alias added"
    source $BASH_KIT_ALIASES
    else
    echo "Failed to add alias"
  fi
}

##
# Recursive text search command.
#
# This fuunction uses ack or grep (depending on what's available in your
# system) to search the current directory recursively for a string represented
# by a regular expression. Optionally, a third numeric argument can be passed
# which specifies the context (how many lines before and after each match
# should be displayed).
#
# Usage:
#   g <regexp> [context]
#
# Example:
#   g kittens         # Searched for kittens within the current directory and
#                       below.
#   g unicorns 10     # Searches for unicorns within the current directory and
#                       below and print 10 lines either side of each match.
#   dif | g ponies    # Searches the VCS diff for ponies.
#
function grepr () {
  if [ $# -lt 1 ]; then
    echo "usage: grepr <regexp> [context]"
    return
  fi

  # Store the search string so we can manipulate it.
  local regexp=$1

  # Automatically escape certain characters.
  regexp="${regexp//(/\(}"
  regexp="${regexp//)/\)}"

  # Figure out if ack is available and if so use it.
  local binary=grep
  which ack > /dev/null 2>&1
  if [ $? == "0" ]; then
    binary=ack
  fi
  which ack-grep > /dev/null 2>&1
  if [ $? == "0" ]; then
    binary=ack-grep
  fi

  # Things required for grep.
  if [ $binary == 'grep' ]; then
    # grep needs spaces escaping.
    regexp="${regexp// /\W}"
    local options=$GREP_OPTIONS
  fi

  # Things required for ack.
  if [[ $binary == 'ack' || $binary == 'ack-grep' ]]; then
    local options=$ACK_OPTIONS
  fi

  # Both grep and ack need brackets escaping.
  regexp="${regexp//(/\(}"
  regexp="${regexp//)/\)}"

  # If 3 parameters are passed, add the context option.
  if [ $# == 2 ]; then
    options="$options --context=$2"
  fi

  $binary "$regexp" $options
}
